(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{433:function(e,t,v){e.exports=v.p+"assets/img/fiberNode.66f20a9b.png"},527:function(e,t,v){"use strict";v.r(t);var _=v(65),a=Object(_.a)({},(function(){var e=this,t=e.$createElement,_=e._self._c||t;return _("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[_("h2",{attrs:{id:"react-fiber-是什么"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#react-fiber-是什么"}},[e._v("#")]),e._v(" React Fiber 是什么")]),e._v(" "),_("p",[e._v("Fiber 在英语中翻译为"),_("code",[e._v("纤维")]),e._v("，它并不是计算机语言中的新名词，而且与进程，线程同为程序的一种执行过程，纤维给我们的感觉就是很细的意思，所以 React 借助这个概念去划分 react 执行过程中的每一个事件单元，")]),e._v(" "),_("p",[_("code",[e._v("React")]),e._v("内部实现的一套状态更新机制。支持任务不同"),_("code",[e._v("优先级")]),e._v("，可中断与恢复，并且恢复后可以复用之前的"),_("code",[e._v("中间状态")])]),e._v(" "),_("p",[e._v("其中每个任务更新单元为"),_("code",[e._v("React Element")]),e._v("对应的 Fiber 节点")]),e._v(" "),_("p",[e._v("在"),_("code",[e._v("React")]),e._v("中，Fiber 的表现形式其实就是一种"),_("code",[e._v("数据结构")])]),e._v(" "),_("h2",{attrs:{id:"为什么会出现-react-fiber"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#为什么会出现-react-fiber"}},[e._v("#")]),e._v(" 为什么会出现 React Fiber?")]),e._v(" "),_("p",[e._v("在 React16 之前，React 执行更新任务表现为同步更新，父组件的更新会触发子组件的更新，但是子组件的更新是一种同步递归的方式，由于递归执行，所以更新一旦开始，中途就无法中断。当层级很深时，递归更新时间超过了 "),_("code",[e._v("16ms")]),e._v("，用户交互就会卡顿，因为浏览器一般的刷新频率是 "),_("code",[e._v("60hz")]),e._v("，也就是一秒刷新 "),_("code",[e._v("60")]),e._v(" 次，每一次的时间大概是 "),_("code",[e._v("16.6ms")]),e._v(" 的样子，如果 js 时间超过了这个时间，那么就会导致页面卡顿，归根结底还是因为 js 线程和 ui 的渲染线程都是跑在浏览器的主线程里面，他们是互斥的")]),e._v(" "),_("p",[_("code",[e._v("React16")]),e._v("引入了"),_("code",[e._v("Fiber")]),e._v("这个概念，解决了"),_("code",[e._v("React15")]),e._v("的同步更新不可中断的问题，"),_("code",[e._v("React16")]),e._v("的更新是异步可中断更新，由于曾经用于递归的虚拟 DOM 数据结构已经无法满足需要。于是，全新的"),_("code",[e._v("Fiber")]),e._v("架构应运而生。浏览器的每一次更新过程中，"),_("code",[e._v("React")]),e._v("都会向浏览器申请 "),_("code",[e._v("5ms")]),e._v(" 的一个时间去执行自己的一个更新任务，如果时间到了(大于 16ms)，那么这个更新任务就会暂停，等到下一次渲染的时候继续执行。")]),e._v(" "),_("h2",{attrs:{id:"fiber-的数据结构"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#fiber-的数据结构"}},[e._v("#")]),e._v(" Fiber 的数据结构")]),e._v(" "),_("img",{attrs:{src:v(433),alt:"fiberNode",height:"300"}})])}),[],!1,null,null,null);t.default=a.exports}}]);