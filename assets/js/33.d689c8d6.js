(window.webpackJsonp=window.webpackJsonp||[]).push([[33],{528:function(t,s,n){"use strict";n.r(s);var a=n(65),e=Object(a.a)({},(function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h2",{attrs:{id:"completeunitofwork"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#completeunitofwork"}},[t._v("#")]),t._v(" completeUnitOfWork")]),t._v(" "),n("p",[t._v("上一节我们讲解了组件执行"),n("code",[t._v("beginWork")]),t._v("后会创建"),n("code",[t._v("子Fiber节点")]),t._v("，节点上可能存在"),n("code",[t._v("effectTag")]),t._v("。")]),t._v(" "),n("p",[t._v("这一节让我们看看"),n("code",[t._v("completeWork")]),t._v("会做什么工作。")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n * 完成一个fiber节点\n * @param {*} unitOfWork\n */")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("completeUnitOfWork")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("unitOfWork")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" completedWork "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" unitOfWork"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("do")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" current "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" completedWork"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("alternate"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" returnFiber "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" completedWork"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("return"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//完成此fiber对应的真实DOM节点创建和属性赋值的功能")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("completeWork")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("current"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" completedWork"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//收集当前fiber的副作用到父fiber上")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("collectEffectList")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("returnFiber"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" completedWork"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//当自己这个fiber完成后，如何寻找下一个要构建的fiber")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" siblingFiber "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" completedWork"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("sibling"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("siblingFiber"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//如果有弟弟，就开始构建弟弟，处理弟弟 completeUnitOfWork")]),t._v("\n      workInProgress "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" siblingFiber"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//如果没有弟弟，说明这是最后一个儿子了，父亲也可以完成了")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//这个循环到最后的时候 returnFiber就是null,也就是根fiber的父亲")]),t._v("\n    completedWork "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" returnFiber"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//不停的修改当前正在处理的fiber最后 workInProgress=null就可以退出workLoop了")]),t._v("\n    workInProgress "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" completedWork"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("workInProgress"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("h2",{attrs:{id:"主要作用"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#主要作用"}},[t._v("#")]),t._v(" 主要作用")]),t._v(" "),n("p",[t._v("beginWork 阶段若不需要再向下遍历，Fiber 节点会开始回溯，判断是否存在兄弟节点需要进行遍历，如果没有，则回溯到父节点，并将自身及自身子树上的 effect 形成 effect list 向父节点传递，以此往复，直至 HostRoot，这个过程被称为 completeUnitOfWork。")]),t._v(" "),n("p",[t._v("合在一起，就是 render 过程，它是纯粹的 JS 计算，不（应）带有任何“副作用”。")]),t._v(" "),n("h2",{attrs:{id:"开始"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#开始"}},[t._v("#")]),t._v(" 开始")]),t._v(" "),n("p",[t._v("在"),n("code",[t._v("completeUnitOfWork")]),t._v("方法里面，会循环的去执行主要的两个方法 "),n("code",[t._v("completeWork(完成此fiber对应的真实DOM节点创建和属性赋值的功能)")]),t._v(","),n("code",[t._v("collectEffectList(收集当前fiber的副作用到父fiber上)")])]),t._v(" "),n("p",[t._v("在"),n("code",[t._v("completeUnitOfWork")]),t._v("每次循环完之后，会去做两条事情，第一个就是会去根据子 fiber 生成真实的 dom 节点，并且会给 dom 节点绑定对应的属性，第二件事情就是会去收集每一个节点的 "),n("code",[t._v("effectTag")]),t._v("，并最终会回溯到父节点上面去，生成一条 "),n("code",[t._v("effectList")]),t._v(" 链表，之后呢，会去找当前子节点是否有兄弟节点，然后接着去处理兄弟节点，如果没有兄弟节点上，说明这个循环就到最后了，这个时候就要去处理父 fiber 了")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//当自己这个fiber完成后，如何寻找下一个要构建的fiber")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" siblingFiber "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" completedWork"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("sibling"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("siblingFiber"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//如果有弟弟，就开始构建弟弟，处理弟弟 completeUnitOfWork")]),t._v("\n  workInProgress "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" siblingFiber"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",[t._v("在 "),n("code",[t._v("completeWork")]),t._v(" 里面，会根据具体的一个 fiber 类型去调用不同的处理逻辑。这里我们重点关注页面渲染所必须的"),n("code",[t._v("HostComponent")]),t._v("（即原生"),n("code",[t._v("DOM组件")]),t._v("对应的"),n("code",[t._v("Fiber节点")]),t._v("）")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("completeWork")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("current"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" workInProgress")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" newProps "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" workInProgress"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("pendingProps"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("switch")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("workInProgress"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("tag"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("HostComponent")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//在新的fiber构建完成的时候，收集更新并且标识 更新副作用")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("current "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" workInProgress"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("stateNode"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("updateHostComponent")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n          current"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n          workInProgress"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n          workInProgress"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("tag"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n          newProps\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//创建真实的DOM节点")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" type "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" workInProgress"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("type"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//div p span")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//创建此fiber的真实DOM")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" instance "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("createInstance")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("type"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" newProps"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("appendAllChildren")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("instance"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" workInProgress"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//让此Fiber的真实DOM属性指向instance")]),t._v("\n        workInProgress"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("stateNode "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" instance"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//给真实DOM添加属性 包括如果独生子是字符串或数字的情况")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("finalizeInitialChildren")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("instance"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" type"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" newProps"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("break")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("break")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("h3",{attrs:{id:"如果老的节点可以复用"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#如果老的节点可以复用"}},[t._v("#")]),t._v(" 如果老的节点可以复用")]),t._v(" "),n("p",[t._v("第一个判断，如果可以复用，并且 "),n("code",[t._v("stateNode")]),t._v(" 存在，那么就会去更新新的 fiber 节点("),n("code",[t._v("workInProgress")]),t._v(")的 "),n("code",[t._v("updateQueue")]),t._v(" 属性，里面保存更新的 prop(比如属性值改变等。。。)，根据新老节点的 prop 去做比较进行更新")]),t._v(" "),n("h3",{attrs:{id:"如果老的节点不能复用"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#如果老的节点不能复用"}},[t._v("#")]),t._v(" 如果老的节点不能复用")]),t._v(" "),n("p",[t._v("否责会去做两件事：")]),t._v(" "),n("p",[t._v("第一件就是会去生成该对应 fiber 的真实 dom 节点，并且赋值给 fiber 节点的 stateNode 属性。因为在 beginwork 阶段的时候只是生成了一个 fiber 节点没有生成 dom 节点")]),t._v(" "),n("p",[t._v("第二节事情就是会把相应的属性放置到原生 dom 上面去，即 pendingProps 上面的属性")]),t._v(" "),n("h2",{attrs:{id:"collecteffectlist-副作用链收集"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#collecteffectlist-副作用链收集"}},[t._v("#")]),t._v(" collectEffectList 副作用链收集")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("collectEffectList")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("returnFiber"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" completedWork")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("returnFiber"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//如果父亲 没有effectList,那就让父亲 的firstEffect链表头指向自己的头")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("returnFiber"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("firstEffect"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      returnFiber"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("firstEffect "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" completedWork"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("firstEffect"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//如果自己有链表尾")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("completedWork"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("lastEffect"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//并且父亲也有链表尾")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("returnFiber"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("lastEffect"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//把自己身上的effectlist挂接到父亲的链表尾部")]),t._v("\n        returnFiber"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("lastEffect"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("nextEffect "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" completedWork"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("firstEffect"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n      returnFiber"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("lastEffect "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" completedWork"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("lastEffect"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" flags "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" completedWork"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("flags"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//如果此完成的fiber有副使用，那么就需要添加到effectList里")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("flags"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//如果父fiber有lastEffect的话，说明父fiber已经有effect链表")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("returnFiber"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("lastEffect"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        returnFiber"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("lastEffect"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("nextEffect "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" completedWork"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        returnFiber"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("firstEffect "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" completedWork"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n      returnFiber"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("lastEffect "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" completedWork"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",[n("code",[t._v("collectEffectList")]),t._v("接受两个参数，第一个是父 fiber 节点，第二个是当前需要处理的 fiber 节点。")]),t._v(" "),n("p",[n("code",[t._v("父fiber")]),t._v(" 的 "),n("code",[t._v("firstEffect")]),t._v(" 和 "),n("code",[t._v("lastEffect")]),t._v("保存的是一条单向链表，这条链表主要是有一个个的子 fiber 节点组成。")]),t._v(" "),n("p",[t._v("副作用链收集完成了之后，即"),n("code",[t._v("completeUnitOfWork")]),t._v("方法里面的 "),n("code",[t._v("workInProgress")]),t._v(" 为 "),n("code",[t._v("null")]),t._v(" 了 就会去执行 commitRoot，也就是我们说的提交阶段。")])])}),[],!1,null,null,null);s.default=e.exports}}]);